<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE entry SYSTEM "SamplesInfo.dtd">
<entry>
    <name>threadFenceReduction</name>
    <description><![CDATA[This sample shows how to perform a reduction operation on an array of values using the thread Fence intrinsic to produce a single value in a single kernel (as opposed to two or more kernel calls as shown in the "reduction" CUDA Sample).  Single-pass reduction requires global atomic instructions (Compute Capability 2.0 or later) and the _threadfence() intrinsic (CUDA 2.2 or later).]]></description>
    <whitepaper></whitepaper>
    <supported_sm_architectures>
        <include>all</include>
    </supported_sm_architectures>
    <keywords>reduction</keywords>
    <scope>1:CUDA Advanced Topics,1:Data-Parallel Algorithms,1:Performance Strategies</scope>
    <files>
    </files>
    <cudaapi></cudaapi>
    <keyconcepts level="advanced">Data-Parallel Algorithms</keyconcepts>
    <keyconcepts level="advanced">Performance Strategies</keyconcepts>
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <devicecompilation>whole</devicecompilation>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>
    <sm-arch>sm32</sm-arch>
    <sm-arch>sm35</sm-arch>
    <sm-arch>sm37</sm-arch>
    <sm-arch>sm50</sm-arch>
    <sm-arch>sm52</sm-arch>
    <sm-arch>sm53</sm-arch>
    <type>exe</type>
    <primary-file>threadFenceReduction.cu</primary-file>
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm, linux:ppc64le</supported-env>
</entry>
