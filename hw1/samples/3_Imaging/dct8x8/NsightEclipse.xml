<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE entry SYSTEM "SamplesInfo.dtd">
<entry>
    <name>DCT8x8</name>
    <description><![CDATA[This sample demonstrates how Discrete Cosine Transform (DCT) for blocks of 8 by 8 pixels can be performed using CUDA: a naive implementation by definition and a more traditional approach used in many libraries. As opposed to implementing DCT in a fragment shader, CUDA allows for an easier and more efficient implementation.]]></description>
    <whitepaper>doc\dct8x8.pdf</whitepaper>
    <supported_sm_architectures>
        <include>all</include>
    </supported_sm_architectures>
    <keywords>CUDA,Image Processing,DCT,Discrete Cosine Transfrom</keywords>
    <scope>1:CUDA Advanced Topics,2:Image Processing,2:Data Compression,2:Video Codecs,2:Computer Vision</scope>
    <files>
        <file>data\barbara.bmp</file>
    </files>
    <cudaapi></cudaapi>
    <keyconcepts level="advanced">Image Processing</keyconcepts>
    <keyconcepts level="advanced">Video Compression</keyconcepts>
    <include-path>./</include-path>
    <include-path>../</include-path>
    <include-path>../../common/inc</include-path>
    <devicecompilation>whole</devicecompilation>
    <sm-arch>sm20</sm-arch>
    <sm-arch>sm30</sm-arch>
    <sm-arch>sm32</sm-arch>
    <sm-arch>sm35</sm-arch>
    <sm-arch>sm37</sm-arch>
    <sm-arch>sm50</sm-arch>
    <sm-arch>sm52</sm-arch>
    <sm-arch>sm53</sm-arch>
    <type>exe</type>
    <primary-file>dct8x8.cu</primary-file>
    <supported-env>linux:x86_64, linux:i686, windows7, macosx:x86_64, macosx:i686, :arm, linux:ppc64le</supported-env>
</entry>
